---
version: '3'

silent: true

includes:
  helm: ../utils/helm.yaml

vars:
  argocd_controller_name: &argocdname argo-cd
  argocd_wrapper_chart_name: argocd
  argocd_controller_namespace: argocd
  argocd_controller_repo: https://argoproj.github.io/argo-helm
  argocd_controller_chart_version: 7.7.16

tasks:

  # helm

  install-dev:
    cmds:
      - task: create-wrapper-chart
      - task: create-values
      - task: dryrun
      - task: apply

  install:
    cmds:
      - task: dryrun
      - task: apply

  create-wrapper-chart:
    dir: '{{.ROOT_DIR}}/config/apps/'
    cmds:
      - task: helm:create-wrapper-chart
        vars:
          APP_WRAPPER_NAME: '{{.argocd_wrapper_chart_name}}'
          APP_NAME: '{{.argocd_controller_name}}'
          APP_REPO: '{{.argocd_controller_repo}}'
          APP_VERSION: '{{.argocd_controller_chart_version}}'

  dryrun:
    vars: &argocdvars
      CHART: '{{.argocd_controller_name}}'
      NAMESPACE: '{{.argocd_controller_namespace}}'
      REPO_URL: '{{.argocd_controller_repo}}'
      VERSION: '{{.argocd_controller_chart_version}}'
      CHART_FOLDER: './config/apps/{{.argocd_wrapper_chart_name}}'
      VALUES_FILES: './config/apps/{{.argocd_wrapper_chart_name}}/values.yaml'
    cmds:
      - task: helm:repo_add
        vars: *argocdvars
      - task: helm:dependency_build
        vars: *argocdvars
      - task: helm:template
        vars: *argocdvars
      - task: helm:template_apply_dry_run
        vars: *argocdvars
  
  apply:
    cmds:
      - task: helm:dependency_build 
        vars: *argocdvars
      - task: helm:install
        vars: *argocdvars

  create-values:
    dir: '{{.ROOT_DIR}}/config/apps/{{.argocd_wrapper_chart_name}}'
    cmds:
      - |
        # this are dev-values.yaml
        test -f values.yaml && mv values.yaml values.yaml.bak || true
        cat<<EOF > values.yaml
        {{.argocd_controller_name}}:
          fullnameOverride: {{.argocd_wrapper_chart_name}}
          namespaceOverride: {{.argocd_controller_namespace}}
          server:
            ingress:
              enabled: true
              hostname: argocd.k3d.localhost
              ingressClassName: nginx
          ## Globally shared configuration
          global:
            # -- Default domain used by all components
            ## Used for ingresses, certificates, SSO, notifications, etc.
            domain: argocd.k3d.localhost

          configs:
            params:
              server.insecure: true
              applicationsetcontroller.enable.progressive.syncs: true
            cm:
              application.resourceTrackingMethod: "annotation" # use annotation for tracking required for Crossplane
              resource.exclusions: |
                - apiGroups:
                  - "*"
                  kinds:
                  - ProviderConfigUsage
              resource.customizations: |
                argoproj.io/Application:
                  health.lua: |
                    health_status = {}
                    health_status.status = "Progressing"
                    health_status.message = ""
                    if obj.status ~= nil then
                      if obj.status.health ~= nil then
                        health_status.status = obj.status.health.status
                        if obj.status.health.message ~= nil then
                          health_status.message = obj.status.health.message
                        end
                      end
                    end
                    return health_status

                argoproj.io/ApplicationSet:
                  health.lua: |
                    health_status = {}
                    health_status.status = "Progressing"
                    health_status.message = ""
                    if obj.status.applicationStatus ~= nil then
                      healthy = true
                      message = ""
                      for i, applicationStatus in ipairs(obj.status.applicationStatus) do
                        if applicationStatus.status ~= nil then
                          if applicationStatus.status ~= "Healthy" then
                            healthy = false
                          end
                        end
                        if applicationStatus.message ~= nil then
                          message = applicationStatus.message
                        end
                      end
                      if healthy == true then
                        health_status.status = "Healthy"
                        health_status.message = message
                      end
                      return health_status
                    end

                "*.upbound.io/*":
                  health.lua: |
                    health_status = {
                      status = "Progressing",
                      message = "Provisioning ..."
                    }

                    local function contains (table, val)
                      for i, v in ipairs(table) do
                        if v == val then
                          return true
                        end
                      end
                      return false
                    end

                    local has_no_status = {
                      "ProviderConfig",
                      "ProviderConfigUsage",
                      "StoreConfig"
                    }

                    if obj.status == nil and contains(has_no_status, obj.kind) then
                      health_status.status = "Healthy"
                      health_status.message = "Resource is up-to-date."
                      return health_status
                    end

                    if obj.status == nil or obj.status.conditions == nil then
                      if obj.kind == "ProviderConfig" then
                        health_status.status = "Healthy"
                        health_status.message = "Resource is in use."
                        return health_status
                      end
                      return health_status
                    end

                    for i, condition in ipairs(obj.status.conditions) do
                      if condition.type == "LastAsyncOperation" then
                        if condition.status == "False" then
                          health_status.status = "Degraded"
                          health_status.message = condition.message
                          return health_status
                        end
                      end

                      if condition.type == "Synced" then
                        if condition.status == "False" then
                          health_status.status = "Degraded"
                          health_status.message = condition.message
                          return health_status
                        end
                      end

                      if condition.type == "Ready" then
                        if condition.status == "True" then
                          health_status.status = "Healthy"
                          health_status.message = "Resource is up-to-date."
                          return health_status
                        end
                      end
                    end

                    return health_status
                
                "*.crossplane.io/*":
                  health.lua: |
                    health_status = {
                      status = "Progressing",
                      message = "Provisioning ..."
                    }

                    local function contains (table, val)
                      for i, v in ipairs(table) do
                        if v == val then
                          return true
                        end
                      end
                      return false
                    end

                    local has_no_status = {
                      "Composition",
                      "CompositionRevision",
                      "DeploymentRuntimeConfig",
                      "ControllerConfig",
                      "ProviderConfig",
                      "ProviderConfigUsage"
                    }
                
                    if obj.status == nil and contains(has_no_status, obj.kind) then
                        health_status.status = "Healthy"
                        health_status.message = "Resource is up-to-date."
                      return health_status
                    end

                    if obj.status == nil or obj.status.conditions == nil then
                      if obj.kind == "ProviderConfig" then
                        health_status.status = "Healthy"
                        health_status.message = "Resource is in use."
                        return health_status
                      end
                      return health_status
                    end

                    for i, condition in ipairs(obj.status.conditions) do
                      if condition.type == "LastAsyncOperation" then
                        if condition.status == "False" then
                          health_status.status = "Degraded"
                          health_status.message = condition.message
                          return health_status
                        end
                      end

                      if condition.type == "Synced" then
                        if condition.status == "False" then
                          health_status.status = "Degraded"
                          health_status.message = condition.message
                          return health_status
                        end
                      end

                      if contains({"Ready", "Healthy", "Offered", "Established"}, condition.type) then
                        if condition.status == "True" then
                          health_status.status = "Healthy"
                          health_status.message = "Resource is up-to-date."
                          return health_status
                        end
                      end
                    end

                    return health_status
        EOF

  # kustomize
  kustomize:install:
    desc: Installs ArgoCD resources manually on the local cluster
    dir: config/apps/argocd-kustomize
    preconditions:
    - sh: 'which kustomize'
      msg: 'kustomize {{.PATH_ERROR}}'
    - sh: 'which kubectl'
      msg: 'kubectl {{.PATH_ERROR}}'
    cmds:
    - kubectl get ns argocd &>/dev/null || kubectl create namespace argocd
    - kubectl config set-context --current --namespace=argocd --cluster=k3d-{{.CLUSTER_NAME}}
    - kustomize build | kubectl apply -f -
    - sleep 10
    - kustomize build | kubectl apply -f -
    - kubectl wait deploy/argocd-server -n argocd --for condition=available --timeout=600s
    - kubectl apply -f ../argocd.yaml
    - echo ""
    ignore_error: true

  kustomize:remove:
    dir: config/apps/argocd-kustomize
    cmds:
    - kustomize build | kubectl delete -f -
    ignore_error: true

  # helpers

  bridge: kubectl port-forward -n argocd svc/argocd-server 8832:80

  password:
    cmds:
    - echo -e "\nYour ArgoCD Admin user password is "
    - kubectl config set-context --current --namespace=argocd --cluster=k3d-{{.CLUSTER_NAME}}
    - kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo
    ignore_error: true

  secret:
    requires:
      vars: [GH_USER, GH_PASS]
    vars:
      GIT_URI:
        sh: git config --get remote.origin.url
    cmds:
    - kubectl get ns argocd || kubectl create ns argocd
    - |
      kubectl apply -f - << EOF
      apiVersion: v1
      kind: Secret
      metadata:
        name: private-repo-creds
        namespace: argocd
        labels:
          argocd.argoproj.io/secret-type: repo-creds
      stringData:
        type: git
        url: {{.GIT_URI}}
        password: {{.GH_PASS}}
        username: {{.GH_USER}}
      EOF
    ignore_error: true

  repo:
    requires:
      vars: [GH_USER, GH_PASS]
    vars:
      GIT_URI:
        sh: git config --get remote.origin.url
    cmds:
    - kubectl get ns argocd || kubectl create ns argocd
    - |
      kubectl apply -f - << EOF
      apiVersion: v1
      kind: Secret
      metadata:
        name: main-repository
        namespace: argocd
        labels:
          argocd.argoproj.io/secret-type: repository
      stringData:
        type: git
        url: {{.GIT_URI}}
        password: {{.GH_PASS}}
        username: {{.GH_USER}}
      EOF
    ignore_error: true

  argo-cd-crossplane-values:
    cmds:
      - task: create-values
        vars:
          CHART: '{{.CHART}}'
          NAME: '{{.NAME}}'
          NAMESPACE: '{{.NAMESPACE}}'
          REPO_URL: '{{.REPO_URL}}'
          VERSION: '{{.VERSION}}'

  create-argocd-helm-app:
    desc: Create argo app for reloader
    requires:
      vars: [CHART, NAME, NAMESPACE, REPO_URL, VERSION]
    dir: config/apps/
    cmds:
    - |
      cat <<EOF>'{{.CHART}}.yaml'
      apiVersion: argoproj.io/v1alpha1
      kind: Application
      metadata:
        name: {{.NAME}}
        finalizers:
        - resources-finalizer.argocd.argoproj.io
      spec:
        project: default
        source:
          repoURL: {{.REPO_URL}}
          chart: {{.CHART}}
          targetRevision: {{.VERSION}}
          helm:
            releaseName: {{.CHART}}
            valuesFiles:
            - values.yaml
        destination:
          namespace: {{.NAMESPACE}}
          name: in-cluster
        syncPolicy:
          automated:
            prune: true
            selfHeal: true
            allowEmpty: true
          syncOptions:
          - Validate=false
          - CreateNamespace=false
          - PrunePropagationPolicy=foreground
          - PruneLast=false
          - ApplyOutOfSyncOnly=false
          - Prune=true
          retry:
            limit: -1
            backoff:
              duration: 20s
              factor: 2
              maxDuration: 15m
      EOF
