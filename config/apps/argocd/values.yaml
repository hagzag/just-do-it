argo-cd:
  fullnameOverride: argocd
  namespaceOverride: argocd
  server:
    ingress:
      enabled: true
      hostname: argocd.k8s.localhost
      ingressClassName: nginx
      tls: false
      pathType: ImplementationSpecific
      extraTls:
      - secretName: tls-secret
        hosts:
        - argocd.k8s.localhost
  ## Globally shared configuration
  global:
    # -- Default domain used by all components
    ## Used for ingresses, certificates, SSO, notifications, etc.
    domain: argocd.k8s.localhost

  configs:
    params:
      server.insecure: true
      applicationsetcontroller.enable.progressive.syncs: true
    cm:
      application.resourceTrackingMethod: "annotation" # use annotation for tracking required for Crossplane
      resource.exclusions: |
        - apiGroups:
          - "*"
          kinds:
          - ProviderConfigUsage
      resource.customizations: |
        argoproj.io/Application:
          health.lua: |
            health_status = {}
            health_status.status = "Progressing"
            health_status.message = ""
            if obj.status ~= nil then
              if obj.status.health ~= nil then
                health_status.status = obj.status.health.status
                if obj.status.health.message ~= nil then
                  health_status.message = obj.status.health.message
                end
              end
            end
            return health_status

        argoproj.io/ApplicationSet:
          health.lua: |
            health_status = {}
            health_status.status = "Progressing"
            health_status.message = ""
            if obj.status.applicationStatus ~= nil then
              healthy = true
              message = ""
              for i, applicationStatus in ipairs(obj.status.applicationStatus) do
                if applicationStatus.status ~= nil then
                  if applicationStatus.status ~= "Healthy" then
                    healthy = false
                  end
                end
                if applicationStatus.message ~= nil then
                  message = applicationStatus.message
                end
              end
              if healthy == true then
                health_status.status = "Healthy"
                health_status.message = message
              end
              return health_status
            end

        "*.upbound.io/*":
          health.lua: |
            health_status = {
              status = "Progressing",
              message = "Provisioning ..."
            }

            local function contains (table, val)
              for i, v in ipairs(table) do
                if v == val then
                  return true
                end
              end
              return false
            end

            local has_no_status = {
              "ProviderConfig",
              "ProviderConfigUsage",
              "StoreConfig"
            }

            if obj.status == nil and contains(has_no_status, obj.kind) then
              health_status.status = "Healthy"
              health_status.message = "Resource is up-to-date."
              return health_status
            end

            if obj.status == nil or obj.status.conditions == nil then
              if obj.kind == "ProviderConfig" then
                health_status.status = "Healthy"
                health_status.message = "Resource is in use."
                return health_status
              end
              return health_status
            end

            for i, condition in ipairs(obj.status.conditions) do
              if condition.type == "LastAsyncOperation" then
                if condition.status == "False" then
                  health_status.status = "Degraded"
                  health_status.message = condition.message
                  return health_status
                end
              end

              if condition.type == "Synced" then
                if condition.status == "False" then
                  health_status.status = "Degraded"
                  health_status.message = condition.message
                  return health_status
                end
              end

              if condition.type == "Ready" then
                if condition.status == "True" then
                  health_status.status = "Healthy"
                  health_status.message = "Resource is up-to-date."
                  return health_status
                end
              end
            end

            return health_status
        
        "*.crossplane.io/*":
          health.lua: |
            health_status = {
              status = "Progressing",
              message = "Provisioning ..."
            }

            local function contains (table, val)
              for i, v in ipairs(table) do
                if v == val then
                  return true
                end
              end
              return false
            end

            local has_no_status = {
              "Composition",
              "CompositionRevision",
              "DeploymentRuntimeConfig",
              "ControllerConfig",
              "ProviderConfig",
              "ProviderConfigUsage"
            }
        
            if obj.status == nil and contains(has_no_status, obj.kind) then
                health_status.status = "Healthy"
                health_status.message = "Resource is up-to-date."
              return health_status
            end

            if obj.status == nil or obj.status.conditions == nil then
              if obj.kind == "ProviderConfig" then
                health_status.status = "Healthy"
                health_status.message = "Resource is in use."
                return health_status
              end
              return health_status
            end

            for i, condition in ipairs(obj.status.conditions) do
              if condition.type == "LastAsyncOperation" then
                if condition.status == "False" then
                  health_status.status = "Degraded"
                  health_status.message = condition.message
                  return health_status
                end
              end

              if condition.type == "Synced" then
                if condition.status == "False" then
                  health_status.status = "Degraded"
                  health_status.message = condition.message
                  return health_status
                end
              end

              if contains({"Ready", "Healthy", "Offered", "Established"}, condition.type) then
                if condition.status == "True" then
                  health_status.status = "Healthy"
                  health_status.message = "Resource is up-to-date."
                  return health_status
                end
              end
            end

            return health_status
